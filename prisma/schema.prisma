// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  TO_DO
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum RoleName {
  ADMIN
  USER
}

model User {
  id             String          @id @default(uuid())
  username       String          @unique
  password       String
  name           String
  workspaceUsers WorkspaceUser[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt() @map("updated_at")
  sessions       Session[]

  @@map("user")
}

model Session {
  token     String   @id
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("session")
}

model Task {
  id             String         @id @default(uuid())
  name           String
  description    String
  status         Status?        @default(TO_DO)
  priority       Priority
  deadline       DateTime?
  workspace      Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String         @map("workspace_id")
  owner          WorkspaceUser  @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String         @map("owner_id")
  assignedUser   WorkspaceUser? @relation("assigned", fields: [assignedUserId], references: [id], onDelete: SetNull)
  assignedUserId String?        @map("assigned_user_id")
  category       Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId     String?        @map("category_id")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt() @map("updated_at")

  @@map("task")
}

model Category {
  id          String        @id @default(uuid())
  name        String
  description String?
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String        @map("workspace_id")
  owner       WorkspaceUser @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String        @map("owner_id")
  tasks       Task[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt() @map("updated_at")

  @@map("category")
}

model Workspace {
  id             String          @id @default(uuid())
  name           String
  description    String?
  categories     Category[]
  tasks          Task[]
  workspaceUsers WorkspaceUser[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt() @map("updated_at")

  @@map("workspace")
}

model WorkspaceUser {
  id                String             @id @default(uuid())
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String             @map("user_id")
  workspace         Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId       String             @map("workspace_id")
  categories        Category[]
  createdTasks      Task[]             @relation("owner")
  assignedTasks     Task[]             @relation("assigned")
  workspaceUserRole WorkspaceUserRole?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt() @map("updated_at")

  @@unique([userId, workspaceId])
  @@map("workspace_user")
}

model WorkspaceUserRole {
  workspaceUser   WorkspaceUser @relation(fields: [workspaceUserId], references: [id], onDelete: Cascade)
  workspaceUserId String        @id @map("workspace_user_id")
  role            RoleName
  permissions     Permission[]
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt() @map("updated_at")

  @@map("workspace_user_role")
}

model Permission {
  id                  String            @id @default(uuid())
  action              String
  workspaceUserRole   WorkspaceUserRole @relation(fields: [workspaceUserRoleId], references: [workspaceUserId], onDelete: Cascade)
  workspaceUserRoleId String            @map("workspace_user_role_id")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt() @map("updated_at")

  @@unique([action, workspaceUserRoleId])
  @@map("permission")
}
